language: rust
cache: cargo
os: linux
stages:
  - "functional"
  - "sanitizer"
  - "architecture"
  - "compiler"

jobs:
  include:
    - stage: "functional"
    - stage: "functional"
      env: RELEASE=true
      script: cargo test --release

    - stage: "sanitizer"
      rust: nightly
      script: &sanitizer_script
        - |
          set -e
          rustup component add rust-src
          RUSTFLAGS=-Zsanitizer="$SANITIZER" cargo test --lib --release -Zbuild-std --target x86_64-unknown-linux-gnu --target-dir=target/"$SANITIZER"
      env: SANITIZER=address
    - stage: "sanitizer"
      rust: nightly
      script: *sanitizer_script
      env: SANITIZER=memory
    - stage: "sanitizer"
      rust: nightly
      script: *sanitizer_script
      env: SANITIZER=thread
    - stage: "sanitizer"
      rust: nightly
      script: *sanitizer_script
      env: SANITIZER=leak

    - stage: "arch"
      script: cargo test
      arch: arm64
      env: TARGET=arm64
    - stage: "arch"
      script: cargo test
      arch: ppc64le
      env: TARGET=ppc64le
    - stage: "arch"
      script: cargo test
      arch: s390x
      env: TARGET=s390x
    - stage: "arch"
      addons:
        apt:
          packages:
            - gcc-multilib
      script:
        - |
          set -e
          rustup target add i686-unknown-linux-gnu
          cargo test --target i686-unknown-linux-gnu --target-dir=target/i686
      env: TARGET=i686

    - stage: "compiler"
      rust: beta
      env: RUST=beta
    - stage: "compiler"
      rust: nightly
      env: RUST=nightly